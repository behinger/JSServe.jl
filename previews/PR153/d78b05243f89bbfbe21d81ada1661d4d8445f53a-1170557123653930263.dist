í«,jìŸ$cac6b28e-f223-4d5f-b83b-871c1f51cabdÄ£subÇßpayloadì»§kí«,jìŸ$cac6b28e-f223-4d5f-b83b-871c1f51cabdÄ£subÇßpayloadï»-kí«∂jìŸ$cac6b28e-f223-4d5f-b83b-871c1f51cabdÉ≥3134191053674583665«eí≥3134191053674583665ì≥9598138846724503886«eí≥9598138846724503886≥9892417434614182168«eí≥9892417434614182168£subÉ£obs«h≥9892417434614182168ßpayload»@fìÇ¥18157204717247092010«h≥9598138846724503886¥13804321024336545270«h≥3134191053674583665Ÿ©return (index) => {
    const values = __lookup_interpolated('13804321024336545270').value
    __lookup_interpolated('18157204717247092010').notify(values[index - 1])
}
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:55®msg_type°1»Ukí«[jìŸ$cac6b28e-f223-4d5f-b83b-871c1f51cabdÅ¥17940162212994298993«eí¥17940162212994298993£subÉ£obs«h¥17940162212994298993ßpayload«√fìÄŸjreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'max', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»'kí«,jìŸ$cac6b28e-f223-4d5f-b83b-871c1f51cabdÄ£subÉ£obs«h≥9892417434614182168ßpayload«≈fìÄŸlreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'value', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»2kí«ZjìŸ$cac6b28e-f223-4d5f-b83b-871c1f51cabdÅ≥1049395838835755782«eí≥1049395838835755782°1£subÉ£obs«h≥1049395838835755782ßpayload«¢fìÄŸUreturn (val)=> {
    document.querySelector('[data-jscall-id="3"]').innerText = val
}ŸG/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/observables.jl:85®msg_type°1»pkí«,jìŸ$cac6b28e-f223-4d5f-b83b-871c1f51cabdÄ£subÇßpayload»(fìÅ≥1250882913487069776«h≥9892417434614182168Ÿæ((node) => {
    node['oninput'] = (event)=> {
    __lookup_interpolated('1250882913487069776').notify(parseInt(event.srcElement.value))
}
})(document.querySelector('[data-jscall-id="2"]'));Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:66®msg_type°2®msg_type°9»Çkí«,jìŸ$cac6b28e-f223-4d5f-b83b-871c1f51cabdÄ£subÇßpayload»:fìÅ¥18430264739411552339É°1í«^kí«-jìŸ$4fdb2f59-857b-4611-8a8b-8c701914c9fcÄ§rootÉßpayload°1¢id≥1049395838835755782®msg_type°0«]kí«-jìŸ$4fdb2f59-857b-4611-8a8b-8c701914c9fcÄ§rootÉßpayload¢id≥9598138846724503886®msg_type°0°2í«^kí«-jìŸ$4fdb2f59-857b-4611-8a8b-8c701914c9fcÄ§rootÉßpayload°4¢id≥1049395838835755782®msg_type°0«]kí«-jìŸ$4fdb2f59-857b-4611-8a8b-8c701914c9fcÄ§rootÉßpayload¢id≥9598138846724503886®msg_type°0°3í«^kí«-jìŸ$4fdb2f59-857b-4611-8a8b-8c701914c9fcÄ§rootÉßpayload°9¢id≥1049395838835755782®msg_type°0«]kí«-jìŸ$4fdb2f59-857b-4611-8a8b-8c701914c9fcÄ§rootÉßpayload¢id≥9598138846724503886®msg_type°0⁄òJSServe.fetch_binary('2848158f20c5f42157338440931903f767a8ddba-90094395293135272.dist').then(binary => {
    const statemap = __lookup_interpolated('18430264739411552339')
    console.log(statemap)
    const observables = JSServe.decode_binary(binary, false);
    JSServe.onany(observables, (states) => {
        console.log(states)
        // messages to send for this state of that observable
        const messages = statemap[states]
        console.log(messages)
        // not all states trigger events
        // so some states won't have any messages recorded
        if (messages){
            messages.forEach(JSServe.process_message)
        }
    })
})
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/export.jl:126®msg_type°2«Fkí«-jìŸ$4fdb2f59-857b-4611-8a8b-8c701914c9fcÄ§rootÇßpayloadê®msg_type°9®msg_type°9