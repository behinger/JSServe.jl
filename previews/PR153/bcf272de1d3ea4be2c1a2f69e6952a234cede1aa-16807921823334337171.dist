í«,jìŸ$b29de3b9-9ce4-4b14-b67a-7277509797c1Ä£subÇßpayloadì»™kí«,jìŸ$b29de3b9-9ce4-4b14-b67a-7277509797c1Ä£subÇßpayloadï»1kí«∫jìŸ$b29de3b9-9ce4-4b14-b67a-7277509797c1É¥14736067551363221455«eí¥14736067551363221455¥13674597197905399412«eí¥13674597197905399412≥5323053711661384215«eí≥5323053711661384215ì£subÉ£obs«h¥13674597197905399412ßpayload»?fìÇ≥1761986316751066091«h¥14736067551363221455¥17125419604313394836«h≥5323053711661384215Ÿ®return (index) => {
    const values = __lookup_interpolated('17125419604313394836').value
    __lookup_interpolated('1761986316751066091').notify(values[index - 1])
}
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:55®msg_type°1»Ukí«[jìŸ$b29de3b9-9ce4-4b14-b67a-7277509797c1Å¥12709974790313020752«eí¥12709974790313020752£subÉ£obs«h¥12709974790313020752ßpayload«√fìÄŸjreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'max', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»(kí«,jìŸ$b29de3b9-9ce4-4b14-b67a-7277509797c1Ä£subÉ£obs«h¥13674597197905399412ßpayload«≈fìÄŸlreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'value', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»2kí«ZjìŸ$b29de3b9-9ce4-4b14-b67a-7277509797c1Å≥5788786426436866425«eí≥5788786426436866425°1£subÉ£obs«h≥5788786426436866425ßpayload«¢fìÄŸUreturn (val)=> {
    document.querySelector('[data-jscall-id="3"]').innerText = val
}ŸG/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/observables.jl:85®msg_type°1»qkí«,jìŸ$b29de3b9-9ce4-4b14-b67a-7277509797c1Ä£subÇßpayload»)fìÅ≥6263615408413263093«h¥13674597197905399412Ÿæ((node) => {
    node['oninput'] = (event)=> {
    __lookup_interpolated('6263615408413263093').notify(parseInt(event.srcElement.value))
}
})(document.querySelector('[data-jscall-id="2"]'));Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:66®msg_type°2®msg_type°9»àkí«,jìŸ$b29de3b9-9ce4-4b14-b67a-7277509797c1Ä£subÇßpayload»@fìÅ¥11022025907144268560É°1í«^kí«-jìŸ$36ef5cee-f143-4ac2-a231-b92e9798d4c2Ä§rootÉßpayload°1¢id≥5788786426436866425®msg_type°0«^kí«-jìŸ$36ef5cee-f143-4ac2-a231-b92e9798d4c2Ä§rootÉßpayload¢id¥14736067551363221455®msg_type°0°2í«^kí«-jìŸ$36ef5cee-f143-4ac2-a231-b92e9798d4c2Ä§rootÉßpayload°4¢id≥5788786426436866425®msg_type°0«^kí«-jìŸ$36ef5cee-f143-4ac2-a231-b92e9798d4c2Ä§rootÉßpayload¢id¥14736067551363221455®msg_type°0°3í«^kí«-jìŸ$36ef5cee-f143-4ac2-a231-b92e9798d4c2Ä§rootÉßpayload°9¢id≥5788786426436866425®msg_type°0«^kí«-jìŸ$36ef5cee-f143-4ac2-a231-b92e9798d4c2Ä§rootÉßpayload¢id¥14736067551363221455®msg_type°0⁄õJSServe.fetch_binary('eca002da6065d6d80ebf10c1e5a267981cca7525-17505796718975430623.dist').then(binary => {
    const statemap = __lookup_interpolated('11022025907144268560')
    console.log(statemap)
    const observables = JSServe.decode_binary(binary, false);
    JSServe.onany(observables, (states) => {
        console.log(states)
        // messages to send for this state of that observable
        const messages = statemap[states]
        console.log(messages)
        // not all states trigger events
        // so some states won't have any messages recorded
        if (messages){
            messages.forEach(JSServe.process_message)
        }
    })
})
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/export.jl:126®msg_type°2«Fkí«-jìŸ$36ef5cee-f143-4ac2-a231-b92e9798d4c2Ä§rootÇßpayloadê®msg_type°9®msg_type°9