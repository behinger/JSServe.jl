í«,jìŸ$3f4c2be8-c70d-4cc6-8361-597abc270a09Ä£subÇßpayloadì»´kí«,jìŸ$3f4c2be8-c70d-4cc6-8361-597abc270a09Ä£subÇßpayloadï»/kí«∫jìŸ$3f4c2be8-c70d-4cc6-8361-597abc270a09É¥17980915103328422953«eí¥17980915103328422953¥10502269343969433167«eí¥10502269343969433167ì≥9682791612883073716«eí≥9682791612883073716£subÉ£obs«h≥9682791612883073716ßpayload»>fìÇ≥6024162662052526749«h¥10502269343969433167≥1750385315452837079«h¥17980915103328422953Ÿßreturn (index) => {
    const values = __lookup_interpolated('6024162662052526749').value
    __lookup_interpolated('1750385315452837079').notify(values[index - 1])
}
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:55®msg_type°1»Ukí«[jìŸ$3f4c2be8-c70d-4cc6-8361-597abc270a09Å¥16985496771606270997«eí¥16985496771606270997£subÉ£obs«h¥16985496771606270997ßpayload«√fìÄŸjreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'max', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»'kí«,jìŸ$3f4c2be8-c70d-4cc6-8361-597abc270a09Ä£subÉ£obs«h≥9682791612883073716ßpayload«≈fìÄŸlreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'value', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»5kí«\jìŸ$3f4c2be8-c70d-4cc6-8361-597abc270a09Å¥15986048935083644675«eí¥15986048935083644675°1£subÉ£obs«h¥15986048935083644675ßpayload«¢fìÄŸUreturn (val)=> {
    document.querySelector('[data-jscall-id="3"]').innerText = val
}ŸG/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/observables.jl:85®msg_type°1»rkí«,jìŸ$3f4c2be8-c70d-4cc6-8361-597abc270a09Ä£subÇßpayload»*fìÅ¥11948865581997298784«h≥9682791612883073716Ÿø((node) => {
    node['oninput'] = (event)=> {
    __lookup_interpolated('11948865581997298784').notify(parseInt(event.srcElement.value))
}
})(document.querySelector('[data-jscall-id="2"]'));Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:66®msg_type°2®msg_type°9»ãkí«,jìŸ$3f4c2be8-c70d-4cc6-8361-597abc270a09Ä£subÇßpayload»CfìÅ¥16169143621128124375É°1í«_kí«-jìŸ$df471822-1a86-4bb5-9d39-4bb738493967Ä§rootÉßpayload°1¢id¥15986048935083644675®msg_type°0«^kí«-jìŸ$df471822-1a86-4bb5-9d39-4bb738493967Ä§rootÉßpayload¢id¥17980915103328422953®msg_type°0°2í«_kí«-jìŸ$df471822-1a86-4bb5-9d39-4bb738493967Ä§rootÉßpayload°4¢id¥15986048935083644675®msg_type°0«^kí«-jìŸ$df471822-1a86-4bb5-9d39-4bb738493967Ä§rootÉßpayload¢id¥17980915103328422953®msg_type°0°3í«_kí«-jìŸ$df471822-1a86-4bb5-9d39-4bb738493967Ä§rootÉßpayload°9¢id¥15986048935083644675®msg_type°0«^kí«-jìŸ$df471822-1a86-4bb5-9d39-4bb738493967Ä§rootÉßpayload¢id¥17980915103328422953®msg_type°0⁄õJSServe.fetch_binary('1c365d8a7cd9c2d1468870ec3cd1e15e4f7d10b7-14567058193261038706.dist').then(binary => {
    const statemap = __lookup_interpolated('16169143621128124375')
    console.log(statemap)
    const observables = JSServe.decode_binary(binary, false);
    JSServe.onany(observables, (states) => {
        console.log(states)
        // messages to send for this state of that observable
        const messages = statemap[states]
        console.log(messages)
        // not all states trigger events
        // so some states won't have any messages recorded
        if (messages){
            messages.forEach(JSServe.process_message)
        }
    })
})
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/export.jl:126®msg_type°2«Fkí«-jìŸ$df471822-1a86-4bb5-9d39-4bb738493967Ä§rootÇßpayloadê®msg_type°9®msg_type°9