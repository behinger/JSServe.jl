í«,jìŸ$dcffb60c-233e-42f2-a086-831b0b595f91Ä£subÇßpayloadì»ßkí«,jìŸ$dcffb60c-233e-42f2-a086-831b0b595f91Ä£subÇßpayloadï»-kí«∂jìŸ$dcffb60c-233e-42f2-a086-831b0b595f91É≥2325984675757394485«eí≥2325984675757394485≥1148781433407997920«eí≥1148781433407997920ì≥6927241379713872200«eí≥6927241379713872200£subÉ£obs«h≥6927241379713872200ßpayload»@fìÇ¥13349787914121105014«h≥2325984675757394485¥16291886283411938680«h≥1148781433407997920Ÿ©return (index) => {
    const values = __lookup_interpolated('16291886283411938680').value
    __lookup_interpolated('13349787914121105014').notify(values[index - 1])
}
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:55®msg_type°1»Ukí«[jìŸ$dcffb60c-233e-42f2-a086-831b0b595f91Å¥12085438207871150086«eí¥12085438207871150086£subÉ£obs«h¥12085438207871150086ßpayload«√fìÄŸjreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'max', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»'kí«,jìŸ$dcffb60c-233e-42f2-a086-831b0b595f91Ä£subÉ£obs«h≥6927241379713872200ßpayload«≈fìÄŸlreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'value', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»5kí«\jìŸ$dcffb60c-233e-42f2-a086-831b0b595f91Å¥10728187729480526668«eí¥10728187729480526668°1£subÉ£obs«h¥10728187729480526668ßpayload«¢fìÄŸUreturn (val)=> {
    document.querySelector('[data-jscall-id="3"]').innerText = val
}ŸG/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/observables.jl:85®msg_type°1»pkí«,jìŸ$dcffb60c-233e-42f2-a086-831b0b595f91Ä£subÇßpayload»(fìÅ≥6358938338341049738«h≥6927241379713872200Ÿæ((node) => {
    node['oninput'] = (event)=> {
    __lookup_interpolated('6358938338341049738').notify(parseInt(event.srcElement.value))
}
})(document.querySelector('[data-jscall-id="2"]'));Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:66®msg_type°2®msg_type°9»àkí«,jìŸ$dcffb60c-233e-42f2-a086-831b0b595f91Ä£subÇßpayload»@fìÅ¥14849885053813530228É°1í«_kí«-jìŸ$3ae027af-c7c9-4cd0-a274-811522fffeb6Ä§rootÉßpayload°1¢id¥10728187729480526668®msg_type°0«]kí«-jìŸ$3ae027af-c7c9-4cd0-a274-811522fffeb6Ä§rootÉßpayload¢id≥2325984675757394485®msg_type°0°2í«_kí«-jìŸ$3ae027af-c7c9-4cd0-a274-811522fffeb6Ä§rootÉßpayload°4¢id¥10728187729480526668®msg_type°0«]kí«-jìŸ$3ae027af-c7c9-4cd0-a274-811522fffeb6Ä§rootÉßpayload¢id≥2325984675757394485®msg_type°0°3í«_kí«-jìŸ$3ae027af-c7c9-4cd0-a274-811522fffeb6Ä§rootÉßpayload°9¢id¥10728187729480526668®msg_type°0«]kí«-jìŸ$3ae027af-c7c9-4cd0-a274-811522fffeb6Ä§rootÉßpayload¢id≥2325984675757394485®msg_type°0⁄õJSServe.fetch_binary('340d0552b85305f5a962de51de2dd0037b964593-10495060108065486242.dist').then(binary => {
    const statemap = __lookup_interpolated('14849885053813530228')
    console.log(statemap)
    const observables = JSServe.decode_binary(binary, false);
    JSServe.onany(observables, (states) => {
        console.log(states)
        // messages to send for this state of that observable
        const messages = statemap[states]
        console.log(messages)
        // not all states trigger events
        // so some states won't have any messages recorded
        if (messages){
            messages.forEach(JSServe.process_message)
        }
    })
})
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/export.jl:126®msg_type°2«Fkí«-jìŸ$3ae027af-c7c9-4cd0-a274-811522fffeb6Ä§rootÇßpayloadê®msg_type°9®msg_type°9