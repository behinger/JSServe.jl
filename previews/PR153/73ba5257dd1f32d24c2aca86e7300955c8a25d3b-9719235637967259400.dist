í«,jìŸ$57267170-9ad1-4c16-bd6b-117a27c5ebe0Ä£subÇßpayloadì»©kí«,jìŸ$57267170-9ad1-4c16-bd6b-117a27c5ebe0Ä£subÇßpayloadï»1kí«∫jìŸ$57267170-9ad1-4c16-bd6b-117a27c5ebe0É≥8863945885939662124«eí≥8863945885939662124¥12197526617328613986«eí¥12197526617328613986ì¥16304781809076289961«eí¥16304781809076289961£subÉ£obs«h¥16304781809076289961ßpayload»?fìÇ¥17165836043598415287«h≥8863945885939662124≥1822733646596601842«h¥12197526617328613986Ÿ®return (index) => {
    const values = __lookup_interpolated('1822733646596601842').value
    __lookup_interpolated('17165836043598415287').notify(values[index - 1])
}
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:55®msg_type°1»Rkí«YjìŸ$57267170-9ad1-4c16-bd6b-117a27c5ebe0Å≥8290089633064188216«eí≥8290089633064188216£subÉ£obs«h≥8290089633064188216ßpayload«√fìÄŸjreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'max', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»(kí«,jìŸ$57267170-9ad1-4c16-bd6b-117a27c5ebe0Ä£subÉ£obs«h¥16304781809076289961ßpayload«≈fìÄŸlreturn value=> JSServe.update_node_attribute(document.querySelector('[data-jscall-id="2"]'), 'value', value)ŸS/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/hyperscript_integration.jl:53®msg_type°1»2kí«ZjìŸ$57267170-9ad1-4c16-bd6b-117a27c5ebe0Å≥1046019738375201021«eí≥1046019738375201021°1£subÉ£obs«h≥1046019738375201021ßpayload«¢fìÄŸUreturn (val)=> {
    document.querySelector('[data-jscall-id="3"]').innerText = val
}ŸG/home/runner/work/JSServe.jl/JSServe.jl/src/rendering/observables.jl:85®msg_type°1»skí«,jìŸ$57267170-9ad1-4c16-bd6b-117a27c5ebe0Ä£subÇßpayload»+fìÅ¥17572222655930892129«h¥16304781809076289961Ÿø((node) => {
    node['oninput'] = (event)=> {
    __lookup_interpolated('17572222655930892129').notify(parseInt(event.srcElement.value))
}
})(document.querySelector('[data-jscall-id="2"]'));Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/widgets.jl:66®msg_type°2®msg_type°9»Åkí«,jìŸ$57267170-9ad1-4c16-bd6b-117a27c5ebe0Ä£subÇßpayload»9fìÅ≤941571767343108649É°1í«^kí«-jìŸ$a3f55621-aff9-4ca5-b10b-b7ba29857f77Ä§rootÉßpayload°1¢id≥1046019738375201021®msg_type°0«]kí«-jìŸ$a3f55621-aff9-4ca5-b10b-b7ba29857f77Ä§rootÉßpayload¢id≥8863945885939662124®msg_type°0°2í«^kí«-jìŸ$a3f55621-aff9-4ca5-b10b-b7ba29857f77Ä§rootÉßpayload°4¢id≥1046019738375201021®msg_type°0«]kí«-jìŸ$a3f55621-aff9-4ca5-b10b-b7ba29857f77Ä§rootÉßpayload¢id≥8863945885939662124®msg_type°0°3í«^kí«-jìŸ$a3f55621-aff9-4ca5-b10b-b7ba29857f77Ä§rootÉßpayload°9¢id≥1046019738375201021®msg_type°0«]kí«-jìŸ$a3f55621-aff9-4ca5-b10b-b7ba29857f77Ä§rootÉßpayload¢id≥8863945885939662124®msg_type°0⁄ôJSServe.fetch_binary('0ce4719fff8f0668ac6e6d4ce234739bb02d7f91-10986085474576315007.dist').then(binary => {
    const statemap = __lookup_interpolated('941571767343108649')
    console.log(statemap)
    const observables = JSServe.decode_binary(binary, false);
    JSServe.onany(observables, (states) => {
        console.log(states)
        // messages to send for this state of that observable
        const messages = statemap[states]
        console.log(messages)
        // not all states trigger events
        // so some states won't have any messages recorded
        if (messages){
            messages.forEach(JSServe.process_message)
        }
    })
})
Ÿ9/home/runner/work/JSServe.jl/JSServe.jl/src/export.jl:126®msg_type°2«Fkí«-jìŸ$a3f55621-aff9-4ca5-b10b-b7ba29857f77Ä§rootÇßpayloadê®msg_type°9®msg_type°9